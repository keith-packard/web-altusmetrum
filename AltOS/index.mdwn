# AltOS

AltOS is the name of Keith's firmware "operating system" for 
[TeleMetrum](../TeleMetrum/) and [TeleDongle](../TeleDongle/).

In addition to the firmware for [TeleMetrum](../TeleMetrum) and 
[TeleDongle](../TeleDongle) boards, the AltOS source tree also includes a
number of utilities useful for monitoring and logging telemetry during flight,
post-processing flight data for analysis, plus utilities for updating firmware,
and developing and debugging new functionality.  The first generation of these
utilities were Linux-only, but our current second-generation software written
largely in [Java](http://java.com) with a small platform-specific library 
works identically on Windows, Mac, and Linux systems!

The firmware and associated software are licensed [GPL version 2](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)

## Available Versions ##

There is a single manual for all Altus Metrum products, which is available 
in [html](doc/altusmetrum.html) and [pdf](doc/altusmetrum.pdf) formats.

[[!inline pages="./releases/* and !*/Discussion and !*.bz2 and !*.zip and !*.exe" show="10" rss="no" raw="yes" ]]

The latest source is always available from [git.gag.com](http://git.gag.com) 
in the project [fw/altos](http://git.gag.com/?p=fw/altos;a=summary).  

If you need to debug code on an Altus Metrum product, you may want the special
version of SDCC containing a highly modified sdcdb with support for the cc1111
debugging interface, which you can find on [git.gag.com](http://git.gag.com) 
in the project [fw/sdcc](http://git.gag.com/?p=fw/sdcc;a=summary).  This is
not necessary if you just want to rebuild AltOS and use it.

## Features ##

Version 0.7.1 is the first release containing our new cross-platform Java-based user interface. AltosUI can:

* Receive and log telemetry from a connected TeleDongle device. All data 
  received is saved to log files named with the current date and the connected 
  rocket serial and flight numbers. There is no mode in which telemetry data 
  will not be saved.

* Download logged data from TeleMetrum devices, either through a direct USB 
  connection or over the air through a TeleDongle device.

* Configure a TeleMetrum device, setting the radio channel, callsign, apogee 
  delay and main deploy height. This can be done through either a USB 
  connection or over a radio link via a TeleDongle device.

* Replay a flight in real-time. This takes a saved telemetry log or eeprom 
  download and replays it through the user interface so you can relive your 
  favorite rocket flights.

* Reprogram Altus Metrum devices. Using an Altus Metrum device connected via 
  USB, another Altus Metrum device can be reprogrammed using the supplied 
  programming cable between the two devices.

* Export Flight data to a comma-separated-values file. This takes either 
  telemetry or on-board flight data and generates data suitable for use in 
  external applications. All data is exported using standard units so that no 
  device-specific knowledge is needed to handle the data.

* Speak to you during the flight. Instead of spending the flight hunched over 
  your laptop looking at the screen, enjoy the view while the computer tells 
  you what’s going on up there. During ascent, you hear the current flight 
  state and altitude information. During descent, you get azimuth, elevation 
  and range information to try and help you find your rocket in the air. Once 
  on the ground, the direction and distance are reported.

AltosUI provides all of these features on the three target operating systems, 
Linux, Mac OS X (version 10.5 or newer) and Windows (XP, Vista or 7). The bulk 
of the software is written in Java and is built once and tested and delivered 
on all three target platforms. A tiny ‘shim’ library is built on each system 
to provide access to the Altus Metrum devices connected over the USB link.

## Future Plans ##

A number of features are implemented or in process in the sources available
in our publicly visible repository that are not part of the current stable
release.  Some of these features are already available in our C utilities, 
but not yet part of our second-generation Java user interface altosui.

* [Google Earth](http://earth.google.com) "KML" file export.  The 
  first-generation C program ao-postflight can do this, the implementation 
  in altosui has improvements.

* Data plotting.  The first-generation C program ao-postflight can output a
  set of standard plots as an svg file.  The plotting code we're integrating 
  into altosui supports direct interaction with the data and is much more fun!

* State-dependent display. When the rocket is on the pad, you mostly want to 
  know if it’s ready to fly. When the rocket is descending on a chute, you 
  want to know where it is in the sky and how fast its falling. Presenting a 
  limited amount of information that represents what is most interesting to 
  the user at any given time should make the display easier to read.

* Ejection charge testing. The TeleMetrum firmware has the ability to be
  commanded to fire ejection charges over the USB or radio links. Safely 
  hooking this up to the user interface will allow for wireless ejection 
  system testing.  It is possible to do this today with a terminal program,
  but we want this to be a feature in altosui.  The key here is “safely”, of 
  course, which means figuring out a ‘fool proof’ user interface.

* A Kalman-filter based approach to apogee detection using more than just the
  baro sensor, so that we can safely control apogee ejection on flights to
  altitudes beyond the range of our baro sensor alone.  Unlike the other items
  on the list, this will be a significant change to the in-rocket TeleMetrum
  firmware.  It may therefore be a while before this becomes part of a stable 
  firmware release.

There are any number of additions that could be made to this list; feel free 
to send along ideas that you’ve got. Of course, all of this software is 
licensed under the GNU General Public License, so you can get the source and 
hack on it in the comfort of your own home.

## Platform Specific Notes ##

### Linux ###

If you use [Debian](http://www.debian.org), then a pre-built package for 
32-bit x86 is currently available here:

	wget -O - http://altusmetrum.org/apt/altusmetrum.key | apt-key add -
	wget -O /etc/apt/sources.list.d/altos.list http://altusmetrum.org/apt/altos.list
	apt-get update
	apt-get install altos

If you use some other distribution of Linux, then 
a Linux package of our second-generation Java bits that 
should run on any distribution with a modern Java version is also 
available.  Unlike the Debian pacakge, which depends on various libraries
already part of the Debian distribution, this package includes a "fat" jar
file with all of the Java libraries that aren't part of the basic Java runtime
environment included, so it should "just work" on any system with 
Java 6.  Development and testing is done with OpenJDK 6, but current 
downloads from [java.com](http://java.com) should be fine too.

If you'd rather build from source, our source tree includes documentation on 
how to build packages for various
Linux systems such as [Arch Linux](http://www.archlinux.org), and the 
debian/ directory contains all the control
files for building the Debian packages on other architectures or derivatives
such as [Ubuntu](http://ubuntu.com).

Bdale has also created a theme for 
[GDM](http://projects.gnome.org/gdm/) that he uses on his primary notebook,
and the 
[Simple Login Manager](http://slim.berlios.de/) that he uses on all of his
other machines and which is ideally suited for machines dedicated to AltOS 
ground station use.  It includes a photo of a drag-race between 
nearly-identical rockets
built by Keith and Bdale, that was the first time either of us gave TeleMetrum
complete control of a rocket flight without some other backup!  See the themes/
directory in the source tree (the themes are included in the Debian package).

### Mac ###

A Mac OS X package that is compatible with 
versions 10.5 "Leopard" and later (including 10.6 "Snow Leopard") is 
available.  The Mac operating system includes Java, and all Altus Metrum
products show up as simple USB serial ports, so this should just work
with no additional drivers or other dependency issues.  Older versions of 
the Mac operating system come with Java versions that are too old for use 
with Altus Metrum software, and we know of no way to update the Java version
other than upgrading to a newer operating system.

### Windows ###

Our Windows package is known to work on at least some flavors of XP, Vista, and 
Windows 7 Enterprise. If you don't already have Java installed, 
download and install a current Java 6 version from [java.com](http://java.com)
first.  Then download our installer and run it.  Windows already has 
the required USB serial device driver, and our package should do the right
things to bind it to our devices, but if you get a complaint about the device
being unrecognized, try pointing to the copy of the telemetrum.inf file 
included in the package directory manually.  Reports of success or failure 
with other versions of Windows would be appreciated!
